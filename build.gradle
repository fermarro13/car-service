plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
}

group = 'com.example.api.rest'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jar{
	enabled = false
}

repositories {
	mavenLocal();
	mavenCentral();
	maven {
		url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/'
		allowInsecureProtocol = true
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.5'
	implementation 'org.springframework.boot:spring-boot-starter-websocket:3.1.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'mysql:mysql-connector-java:8.0.27'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.2'

	runtimeOnly 'com.h2database:h2'


}

tasks.named('test', Test) {
	useJUnitPlatform()
	jacocoTestCoverageVerification
	jacocoTestReport
}

jacoco {
	toolVersion = "0.8.9"
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/generated', 'src/main/java']
		}
		resources{
			copy{
				from "src/main/env/${environment}"
				into 'src/main/resources/' include '*.properties'
			}
		}
	}
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation  = layout.buildDirectory.dir('reports/coverage')
	}

	afterEvaluate {
		classDirectories.setFrom(files(
				classDirectories.files.collect {
					fileTree(dir: it, includes: [
						"com/example/api/rest/carservice/service/impl/",
					])
				}
		))
	}
}

